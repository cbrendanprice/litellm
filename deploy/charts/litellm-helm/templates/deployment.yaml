apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "litellm.fullname" . }}
  labels:
    {{- include "litellm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "litellm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "litellm.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "litellm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: db-ready
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "docker.io/bitnami/postgresql:16.1.0-debian-11-r20"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if .Values.db.deployStandalone }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-dbcredentials
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-dbcredentials
                  key: password
            - name: DATABASE_HOST
              value: {{ .Release.Name }}-postgresql
            - name: DATABASE_NAME
              value: litellm
            {{- else if .Values.db.useExisting }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.usernameKey }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.passwordKey }}
            - name: DATABASE_HOST
              value: {{ .Values.db.endpoint }}
            - name: DATABASE_NAME
              value: litellm
            {{- end }}
          command:
            - sh
            - -c
            - |
              # Maximum wait time will be (limit * 2) seconds.
              limit=60
              current=0
              ret=1
              while [ $current -lt $limit ] && [ $ret -ne 0 ]; do
                echo "Waiting for database to be ready $current"
                psql -U $(DATABASE_USERNAME) -h $(DATABASE_HOST) -l
                ret=$?
                current=$(( $current + 1 ))
                sleep 2
              done
              if [ $ret -eq 0 ]; then
                echo "Database is ready"
              else
                echo "Database failed to become ready before we gave up waiting."
              fi
          {{ if .Values.securityContext.readOnlyRootFilesystem }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          {{ end }}
        {{- if and .Values.proxy_config_persistence.enabled .Values.proxy_config_persistence.sharedVolumeExistingClaim }}
        # TODO: init container to create config.yaml if not exists
        - name: ensure-config-file-exists
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: bash:latest
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
          - bash
          - -c
          - |
            [[ -d /mnt/share/litellm ]] || mkdir -p -m 777 /mnt/share/litellm
            [[ -s /mnt/share/litellm/config.yaml ]] && exit 0
            echo "now creating config file using defined configmap..."
            echo ""
            cat /opt/ref/litellm/config.yaml > /mnt/share/litellm/config.yaml
            echo "config file created successfully."
          volumeMounts:
          - name: litellm-config-volume
            mountPath: /mnt/share/
          - name: litellm-config-configmap
            mountPath: /opt/ref/litellm/
        {{- end }}
      containers:
        - name: {{ include "litellm.name" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "main-%s" .Chart.AppVersion) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: {{ .Values.service.port | quote}}
            {{- if .Values.cache.endpoint }}
            - name: REDIS_HOST
              value: {{ .Values.cache.endpoint | quote }}
            - name: REDIS_PORT
              value: {{ .Values.cache.port | quote }}
            {{- if and .Values.cache.secret.name .Values.cache.secret.passwordKey }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.cache.secret.passwordKey }}
                  name: {{ .Values.cache.secret.name }}
            {{- end }}
            {{- if or .Values.cache.username (and .Values.cache.secret.name .Values.cache.secret.usernameKey) }}
            - name: REDIS_USER
              {{- if .Values.cache.username }}
              value: {{ .Values.cache.username }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.cache.secret.usernameKey }}
                  name: {{ .Values.cache.secret.name }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.db.deployStandalone }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-dbcredentials
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-dbcredentials
                  key: password
            - name: DATABASE_HOST
              value: {{ .Release.Name }}-postgresql
            - name: DATABASE_NAME
              value: litellm
            {{- else if .Values.db.useExisting }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.usernameKey }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.db.secret.name }}
                  key: {{ .Values.db.secret.passwordKey }}
            - name: DATABASE_HOST
              value: {{ .Values.db.endpoint }}
            - name: DATABASE_NAME
              value: {{ .Values.db.database }}
            {{- end }}
            - name: DATABASE_URL
              value: "postgresql://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@$(DATABASE_HOST)/$(DATABASE_NAME)"
            {{- if and (not .Values.masterkey.value) (and .Values.masterkey.existingSecret.key .Values.masterkey.existingSecret.name) }}
            - name: PROXY_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.masterkey.existingSecret.name }}
                  key: {{ .Values.masterkey.existingSecret.key }}
            {{- else }}
            - name: PROXY_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "litellm.fullname" . }}-masterkey
                  key: masterkey
            {{- end }}
            {{- if .Values.redis.enabled }}
            - name: REDIS_HOST
              value: {{ include "litellm.redis.serviceName" . }}
            - name: REDIS_PORT
              value: {{ include "litellm.redis.port" . | quote }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "redis.secretName" .Subcharts.redis }}
                  key: {{include "redis.secretPasswordKey" .Subcharts.redis }}
            {{- end }}
          envFrom:
          {{- range .Values.environmentSecrets }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          args:
            - --config
            {{- if and .Values.proxy_config_persistence.enabled .Values.proxy_config_persistence.sharedVolumeExistingClaim }}
            - /mnt/share/litellm/config.yaml
            {{- else }}
            - /etc/litellm/config.yaml
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health/liveliness
              port: http
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: http
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          # Give the container time to start up.  Up to 5 minutes (10 * 30 seconds)
          startupProbe:
            httpGet:
              path: /health/readiness
              port: http
            failureThreshold: 30
            periodSeconds: 10
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if and .Values.proxy_config_persistence.enabled .Values.proxy_config_persistence.sharedVolumeExistingClaim }}
            - name: litellm-config-volume
              mountPath: /mnt/share/
            {{- else }}
            - name: litellm-config-configmap
              mountPath: /etc/litellm/
            {{- end }}
          {{ if .Values.securityContext.readOnlyRootFilesystem }}
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /.cache
            - name: npm
              mountPath: /.npm
          {{- end }}
          {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{ if .Values.securityContext.readOnlyRootFilesystem }}
        - name: tmp
          emptyDir:
            sizeLimit: 500Mi
        - name: cache
          emptyDir:
            sizeLimit: 500Mi
        - name: npm
          emptyDir:
            sizeLimit: 500Mi
        {{- end }}
        {{- if and .Values.proxy_config_persistence.enabled .Values.proxy_config_persistence.sharedVolumeExistingClaim }}
        - name: litellm-config-volume
          persistentVolumeClaim:
            claimName: {{ .Values.proxy_config_persistence.sharedVolumeExistingClaim | quote }}
        - name: litellm-config-configmap
          configMap:
            name: {{ include "litellm.fullname" . }}-config
            items:
              - key: "config.yaml"
                path: "config.yaml"
        {{- else }}
        - name: litellm-config-configmap
          configMap:
            name: {{ include "litellm.fullname" . }}-config
            items:
              - key: "config.yaml"
                path: "config.yaml"
        {{- end }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
